"use client"

import { useState, useEffect } from "react"
import { motion, AnimatePresence } from "framer-motion"
import { Button } from "@/components/ui/button"
import { Card, CardContent } from "@/components/ui/card"
import { Swords, Users, Trophy, Zap, Clock, Target, Crown, Brain, Star, Shield, Flame } from "lucide-react"
import { QuizBattleMatchmaking } from "@/components/quiz-battle/matchmaking"
import { QuizBattleGame } from "@/components/quiz-battle/game"
import { QuizBattleResults } from "@/components/quiz-battle/results"
import { useAuth } from "@/contexts/auth-context"
import { wsService } from "@/lib/websocket-service"

type GamePhase = "rules" | "matchmaking" | "playing" | "results"

export default function QuizBattlePage() {
  const [gamePhase, setGamePhase] = useState<GamePhase>("rules")
  const [gameData, setGameData] = useState<any>(null)
  const [onlineUsers, setOnlineUsers] = useState(0)
  const { user } = useAuth()

  useEffect(() => {
    if (user && gamePhase === "matchmaking") {
      wsService.connect(user.id || user.email || "anonymous")
      wsService.on("online_users_update", (count: number) => {
        setOnlineUsers(count)
      })
      wsService.on("match_found", (matchData: any) => {
        setGameData(matchData)
        setGamePhase("playing")
      })
      return () => {
        wsService.disconnect()
      }
    }
  }, [user, gamePhase])

  const rules = [
    {
      icon: Users,
      title: "Real Players Only",
      description: "Battle against actual players online - no bots, no fake opponents!",
      color: "text-cyan-400",
      bgColor: "bg-cyan-900/20 border-cyan-500/30",
    },
    {
      icon: Target,
      title: "Choose Opponent's Topic",
      description: "Select 1 topic from 3 options to challenge your opponent with",
      color: "text-purple-400",
      bgColor: "bg-purple-900/20 border-purple-500/30",
    },
    {
      icon: Brain,
      title: "AI-Generated Questions",
      description: "Fresh questions generated by AI for each battle - never the same twice",
      color: "text-green-400",
      bgColor: "bg-green-900/20 border-green-500/30",
    },
    {
      icon: Zap,
      title: "One Hint Per Game",
      description: "Use your single hint strategically - it could make or break your victory",
      color: "text-yellow-400",
      bgColor: "bg-yellow-900/20 border-yellow-500/30",
    },
    {
      icon: Trophy,
      title: "Winner Takes All",
      description: "Score the most points to claim victory and dominate the leaderboards",
      color: "text-red-400",
      bgColor: "bg-red-900/20 border-red-500/30",
    },
  ]

  const handleStartGame = () => {
    if (!user) {
      // Redirect to login or show login modal
      alert("Please sign in to play Quiz Battle!")
      return
    }
    setGamePhase("matchmaking")
  }

  const handleMatchFound = (matchData: any) => {
    setGameData(matchData)
    setGamePhase("playing")
  }

  const handleGameComplete = (results: any) => {
    setGameData(results)
    setGamePhase("results")
  }

  const handlePlayAgain = () => {
    setGameData(null)
    setGamePhase("matchmaking")
  }

  const handleBackToRules = () => {
    setGameData(null)
    setGamePhase("rules")
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-900 to-black">
      {/* Animated background elements */}
      <div className="absolute inset-0 overflow-hidden pointer-events-none">
        {Array.from({ length: 15 }).map((_, i) => (
          <motion.div
            key={i}
            className="absolute text-2xl opacity-20"
            style={{
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
            }}
            animate={{
              y: [0, -50, 0],
              x: [0, Math.random() * 30 - 15, 0],
              rotate: [0, 360],
              scale: [0.5, 1, 0.5],
            }}
            transition={{
              duration: Math.random() * 15 + 10,
              repeat: Number.POSITIVE_INFINITY,
              ease: "linear",
            }}
          >
            {"‚öîÔ∏èüî•‚ö°üíÄüéØüíéüåüüîÆ".split("")[Math.floor(Math.random() * 8)]}
          </motion.div>
        ))}
      </div>

      <div className="container mx-auto px-4 py-8 relative z-10">
        <div className="flex justify-end mb-4">
          <span className="text-cyan-400 font-bold text-lg">Players Online: {onlineUsers}</span>
        </div>
        <AnimatePresence mode="wait">
          {gamePhase === "rules" && (
            <motion.div
              key="rules"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ duration: 0.5 }}
            >
              {/* Header */}
              <div className="text-center mb-12">
                <motion.div
                  className="flex items-center justify-center gap-4 mb-6"
                  initial={{ scale: 0 }}
                  animate={{ scale: 1 }}
                  transition={{ duration: 0.5, delay: 0.2 }}
                >
                  <div className="relative">
                    <motion.div
                      className="w-24 h-24 rounded-full bg-gradient-to-br from-red-600 via-orange-600 to-yellow-500 flex items-center justify-center shadow-2xl shadow-red-500/50"
                      animate={{
                        rotate: [0, 10, -10, 0],
                        scale: [1, 1.1, 1],
                      }}
                      transition={{ duration: 3, repeat: Number.POSITIVE_INFINITY }}
                    >
                      <Swords className="h-12 w-12 text-white" />
                    </motion.div>
                    <motion.div
                      className="absolute -top-2 -right-2"
                      animate={{
                        rotate: [0, 20, 0, -20, 0],
                        scale: [1, 1.3, 1],
                      }}
                      transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY }}
                    >
                      <Flame className="h-10 w-10 text-orange-400" />
                    </motion.div>
                  </div>
                </motion.div>

                <motion.h1
                  className="text-6xl md:text-8xl font-bold mb-4 bg-clip-text text-transparent bg-gradient-to-r from-red-500 via-orange-500 to-yellow-500"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.3 }}
                  style={{
                    textShadow: "0 0 30px rgba(239, 68, 68, 0.5)",
                  }}
                >
                  QUIZ BATTLE
                </motion.h1>

                <motion.p
                  className="text-xl text-gray-300 max-w-2xl mx-auto"
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ duration: 0.5, delay: 0.4 }}
                >
                  Enter the arena. Face real opponents. Only the smartest survive.
                </motion.p>
              </div>

              {/* Live Stats */}
              <motion.div
                className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.5 }}
              >
                <Card className="bg-gray-800/50 border-2 border-cyan-500/30 backdrop-blur-sm">
                  <CardContent className="p-6 text-center">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-cyan-500 to-blue-600 flex items-center justify-center mx-auto mb-4 shadow-lg shadow-cyan-500/50">
                      <Users className="h-8 w-8 text-white" />
                    </div>
                    <h3 className="text-3xl font-bold text-cyan-400 mb-2">{onlineUsers}</h3>
                    <p className="text-gray-300">Players Online</p>
                    <div className="w-2 h-2 bg-green-400 rounded-full mx-auto mt-2 animate-pulse"></div>
                  </CardContent>
                </Card>

                <Card className="bg-gray-800/50 border-2 border-purple-500/30 backdrop-blur-sm">
                  <CardContent className="p-6 text-center">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-purple-500 to-pink-600 flex items-center justify-center mx-auto mb-4 shadow-lg shadow-purple-500/50">
                      <Clock className="h-8 w-8 text-white" />
                    </div>
                    <h3 className="text-3xl font-bold text-purple-400 mb-2">30s</h3>
                    <p className="text-gray-300">Per Question</p>
                  </CardContent>
                </Card>

                <Card className="bg-gray-800/50 border-2 border-orange-500/30 backdrop-blur-sm">
                  <CardContent className="p-6 text-center">
                    <div className="w-16 h-16 rounded-full bg-gradient-to-br from-orange-500 to-red-600 flex items-center justify-center mx-auto mb-4 shadow-lg shadow-orange-500/50">
                      <Star className="h-8 w-8 text-white" />
                    </div>
                    <h3 className="text-3xl font-bold text-orange-400 mb-2">29</h3>
                    <p className="text-gray-300">Battle Topics</p>
                  </CardContent>
                </Card>
              </motion.div>

              {/* Rules */}
              <motion.div
                className="mb-12"
                initial={{ opacity: 0, y: 30 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ duration: 0.5, delay: 0.6 }}
              >
                <h2 className="text-4xl font-bold text-center mb-8 text-white">Battle Rules</h2>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {rules.map((rule, index) => (
                    <motion.div
                      key={index}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.5, delay: 0.7 + index * 0.1 }}
                      whileHover={{ scale: 1.05, y: -5 }}
                    >
                      <Card
                        className={`h-full bg-gray-800/30 border-2 ${rule.bgColor} backdrop-blur-sm hover:shadow-xl transition-all duration-300`}
                      >
                        <CardContent className="p-6 text-center">
                          <div
                            className={`w-16 h-16 rounded-full bg-gray-800/50 border-2 border-current flex items-center justify-center mx-auto mb-4 ${rule.color}`}
                          >
                            <rule.icon className={`h-8 w-8 ${rule.color}`} />
                          </div>
                          <h3 className="text-xl font-bold mb-3 text-white">{rule.title}</h3>
                          <p className="text-gray-300">{rule.description}</p>
                        </CardContent>
                      </Card>
                    </motion.div>
                  ))}
                </div>
              </motion.div>

              {/* Start Button */}
              <motion.div
                className="text-center"
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.5, delay: 1.2 }}
              >
                {user ? (
                  <Button
                    onClick={handleStartGame}
                    size="lg"
                    className="bg-gradient-to-r from-red-600 via-orange-600 to-yellow-500 hover:from-red-700 hover:via-orange-700 hover:to-yellow-600 text-white font-bold text-2xl px-16 py-8 rounded-full shadow-2xl shadow-red-500/50 transition-all duration-300 transform hover:scale-105 border-2 border-orange-400/50"
                  >
                    <motion.div
                      className="flex items-center gap-4"
                      whileHover={{ x: 5 }}
                      transition={{ type: "spring", stiffness: 400, damping: 10 }}
                    >
                      <Shield className="h-8 w-8" />
                      ENTER BATTLE
                      <Crown className="h-8 w-8" />
                    </motion.div>
                  </Button>
                ) : (
                  <div className="space-y-4">
                    <p className="text-xl text-gray-300 mb-4">Sign in to enter the battle arena</p>
                    <Button
                      onClick={() => (window.location.href = "/signin")}
                      size="lg"
                      className="bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold text-xl px-12 py-6 rounded-full"
                    >
                      Sign In to Battle
                    </Button>
                  </div>
                )}

                <motion.p
                  className="text-sm text-gray-400 mt-6"
                  animate={{ opacity: [0.5, 1, 0.5] }}
                  transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY }}
                >
                  üî• Real players ‚Ä¢ Real battles ‚Ä¢ Real glory
                </motion.p>
              </motion.div>
            </motion.div>
          )}

          {gamePhase === "matchmaking" && (
            <QuizBattleMatchmaking onMatchFound={handleMatchFound} onCancel={handleBackToRules} />
          )}

          {gamePhase === "playing" && gameData && (
            <QuizBattleGame gameData={gameData} onGameComplete={handleGameComplete} user={user} />
          )}

          {gamePhase === "results" && gameData && (
            <QuizBattleResults results={gameData} onPlayAgain={handlePlayAgain} onBackToMenu={handleBackToRules} />
          )}
        </AnimatePresence>
      </div>
    </div>
  )
}
